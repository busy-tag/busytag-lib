name: Build and Test

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

env:
  DOTNET_VERSION_8: '8.0.x'
  DOTNET_VERSION_9: '9.0.x'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Linux support temporarily disabled - not fully tested
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest, macos-latest]
        include:
          # - os: ubuntu-latest
          #   artifact-name: linux
          - os: windows-latest
            artifact-name: windows
          - os: macos-latest
            artifact-name: macos
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_8 }}

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install workloads (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "🪟 Installing Windows workloads..."
          try {
            dotnet workload install maccatalyst --skip-sign-check
          } catch {
            Write-Host "⚠️ Workload installation failed, continuing..." -ForegroundColor Yellow
          }

      - name: Install workloads (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "🔧 Installing workloads for macOS..."
          dotnet workload install maccatalyst --skip-sign-check || echo "⚠️ Workload installation failed, continuing..."

      - name: Diagnostic information (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "🔍 Build Environment Diagnostic" -ForegroundColor Cyan
          Write-Host "==============================" -ForegroundColor Cyan
          Write-Host "OS: $($PSVersionTable.OS)"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Directory contents:"
          Get-ChildItem -Force
          Write-Host ""
          Write-Host ".NET SDK version:"
          dotnet --version
          Write-Host ""
          Write-Host "Available SDKs:"
          dotnet --list-sdks
          Write-Host ""
          Write-Host "Project file check:"
          if (Test-Path "BusyTag.Lib.csproj") {
            Write-Host "✅ BusyTag.Lib.csproj found" -ForegroundColor Green
            Write-Host "Target frameworks:"
            Select-String -Path "BusyTag.Lib.csproj" -Pattern "TargetFramework" -Context 0,3
          } else {
            Write-Host "❌ BusyTag.Lib.csproj not found" -ForegroundColor Red
          }
          Write-Host ""
          Write-Host "Workloads:"
          try { dotnet workload list } catch { Write-Host "No workloads or command failed" }

      - name: Diagnostic information (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "🔍 Build Environment Diagnostic"
          echo "=============================="
          echo "OS: $(uname -a)"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo ".NET SDK version:"
          dotnet --version
          echo ""
          echo "Available SDKs:"
          dotnet --list-sdks
          echo ""
          echo "Project file check:"
          if [[ -f "BusyTag.Lib.csproj" ]]; then
            echo "✅ BusyTag.Lib.csproj found"
            echo "Target frameworks:"
            grep -A 3 "TargetFramework" BusyTag.Lib.csproj || echo "No TargetFramework found"
          else
            echo "❌ BusyTag.Lib.csproj not found"
          fi
          echo ""
          echo "Workloads:"
          dotnet workload list || echo "No workloads or command failed"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore BusyTag.Lib.csproj

      - name: Build (Debug)
        run: dotnet build BusyTag.Lib.csproj --configuration Debug --no-restore

      - name: Build (Release)
        run: dotnet build BusyTag.Lib.csproj --configuration Release --no-restore
      
      # Add when you have tests
      # - name: Run tests
      #   run: dotnet test --configuration Release --no-build --verbosity normal --logger trx --results-directory TestResults
      
      # - name: Upload test results
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: test-results-${{ matrix.artifact-name }}
      #     path: TestResults/*.trx

      - name: Pack NuGet package (Windows only for cross-platform package)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet pack BusyTag.Lib.csproj --configuration Release --no-build --output ./packages
          dir ./packages/

      - name: Upload NuGet package artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ./packages/*.nupkg
          retention-days: 5

  code-analysis:
    name: Code Analysis
    runs-on: ubuntu-latest  # Keep ubuntu for CI tasks (no device access needed)
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install workloads
        shell: bash
        run: |
          echo "🔧 Installing workloads..."
          dotnet workload install maccatalyst --skip-sign-check || echo "⚠️ Workload installation failed, continuing..."

      - name: Restore dependencies
        run: dotnet restore

      - name: Run code analysis
        run: |
          dotnet build --configuration Release --verbosity normal \
            -p:TreatWarningsAsErrors=false \
            -p:WarningsAsErrors="" \
            -p:RunAnalyzersDuringBuild=true

      - name: Check for compiler warnings
        run: |
          echo "Checking for compiler warnings..."
          # Add custom logic here if needed

  compatibility-check:
    name: Framework Compatibility
    runs-on: ubuntu-latest  # Keep ubuntu for build checks (no device access needed)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_8 }}

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install workloads
        shell: bash
        run: |
          echo "🔧 Installing workloads..."
          dotnet workload install maccatalyst --skip-sign-check || echo "⚠️ Workload installation failed, continuing..."

      - name: Restore dependencies
        run: dotnet restore BusyTag.Lib.csproj

      - name: Test .NET 8.0 compatibility
        run: |
          echo "Testing .NET 8.0 compatibility..."
          dotnet build BusyTag.Lib.csproj --framework net8.0 --configuration Release --no-restore

      - name: Test .NET 9.0 compatibility
        run: |
          echo "Testing .NET 9.0 compatibility..."
          dotnet build BusyTag.Lib.csproj --framework net9.0 --configuration Release --no-restore

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest  # Keep ubuntu for package operations (no device access needed)
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install required workloads
        shell: bash
        run: |
          echo "🔧 Installing .NET workloads..."
          dotnet workload install maccatalyst --skip-sign-check || echo "⚠️ Workload installation failed, continuing..."
          
          echo "📋 Installed workloads:"
          dotnet workload list || echo "No workloads available"
          echo "✅ Workload setup completed"

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ./packages

      - name: Install package validation tool
        run: dotnet tool install -g dotnet-validate --version 0.0.1-preview.304

      - name: Validate package
        run: |
          PACKAGE_FILE=$(find ./packages -name "*.nupkg" | head -1)
          echo "Validating package: $PACKAGE_FILE"
          
          # Basic validation
          if [[ -f "$PACKAGE_FILE" ]]; then
            echo "✅ Package file exists"
            unzip -l "$PACKAGE_FILE"
          else
            echo "❌ Package file not found"
            exit 1
          fi

      - name: Test package installation
        run: |
          # Create a test project
          mkdir test-consumer
          cd test-consumer
          dotnet new console
          
          # Add the package
          PACKAGE_FILE=$(find ../packages -name "*.nupkg" | head -1)
          dotnet add package BusyTag.Lib --source ../packages
          
          # Create a simple test
          cat > Program.cs << 'EOF'
          using BusyTag.Lib;
          using System;
          
          // Simple test to ensure the package can be loaded
          var manager = new BusyTagManager();
          Console.WriteLine("✅ BusyTag.Lib package loaded successfully!");
          Console.WriteLine($"Experimental Linux support: {manager.EnableExperimentalLinuxSupport}");
          manager.Dispose();
          EOF
          
          # Build and run
          dotnet build
          dotnet run
          
          echo "✅ Package installation test passed"