name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v0.5.2, etc.
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., 0.5.2)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_VERSION_9: '9.0.x'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest  # Keep ubuntu for CI operations (no device access needed)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for GitVersion

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install workloads
        shell: bash
        run: |
          echo "üîß Installing workloads..."
          dotnet workload install maccatalyst --skip-sign-check || echo "‚ö†Ô∏è Workload installation failed, continuing..."
          
          echo "üìã Installed workloads:"
          dotnet workload list || echo "No workloads available"
          echo "‚úÖ Workload setup completed"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore BusyTag.Lib.csproj

      - name: Build solution
        run: dotnet build BusyTag.Lib.csproj --configuration Release --no-restore
      
      # Add test step if you have tests
      # - name: Run tests
      #   run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/bin/Release/
            **/obj/Release/
          retention-days: 1

  pack:
    name: Pack NuGet Package
    runs-on: ubuntu-latest  # Keep ubuntu for packaging (no device access needed)
    needs: build-and-test
    outputs:
      package-version: ${{ steps.get-version.outputs.version }}
      package-path: ${{ steps.pack.outputs.package-path }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install workloads
        shell: bash
        run: |
          echo "üîß Installing workloads..."
          dotnet workload install maccatalyst --skip-sign-check || echo "‚ö†Ô∏è Workload installation failed, continuing..."

      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Update project version
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/" BusyTag.Lib.csproj
          sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$VERSION.0<\/AssemblyVersion>/" BusyTag.Lib.csproj
          sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$VERSION.0<\/FileVersion>/" BusyTag.Lib.csproj

      - name: Restore dependencies
        run: dotnet restore

      - name: Create output directory
        run: mkdir -p ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: Pack NuGet package
        id: pack
        run: |
          dotnet pack --configuration Release --no-restore \
            --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
            -p:PackageVersion=${{ steps.get-version.outputs.version }}
          
          PACKAGE_FILE=$(find ${{ env.PACKAGE_OUTPUT_DIRECTORY }} -name "*.nupkg" | head -1)
          echo "package-path=$PACKAGE_FILE" >> $GITHUB_OUTPUT
          echo "Package created: $PACKAGE_FILE"

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
          retention-days: 90

      - name: Upload symbol package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-symbols
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.snupkg
          retention-days: 90

  # Multi-platform validation (Linux excluded)
  validate:
    name: Validate on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: pack
    strategy:
      matrix:
        # Linux validation temporarily disabled - not fully tested
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest, macos-latest]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION_9 }}

      - name: Install workloads (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "ü™ü Installing Windows workloads..."
          try {
            dotnet workload install maccatalyst --skip-sign-check
          } catch {
            Write-Host "‚ö†Ô∏è Workload installation failed, continuing..." -ForegroundColor Yellow
          }

      - name: Install workloads (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "üîß Installing workloads for macOS..."
          dotnet workload install maccatalyst --skip-sign-check || echo "‚ö†Ô∏è Workload installation failed, continuing..."

      - name: Download package artifact
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: Test package installation
        run: |
          # Create a test project to validate the package
          mkdir test-project
          cd test-project
          
          # Create a console app targeting the same frameworks as your library
          dotnet new console
          
          # Add the NuGet.org source alongside the local package source
          dotnet add package BusyTag.Lib --source ${{ env.PACKAGE_OUTPUT_DIRECTORY }} --version ${{ needs.pack.outputs.package-version }} --source https://api.nuget.org/v3/index.json
          
          # Try to build
          dotnet build
          
          echo "‚úÖ Package validation successful on ${{ matrix.os }}"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest  # Keep ubuntu for release creation (no device access needed)
    needs: [pack, validate]
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: Download symbol artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-symbols
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.pack.outputs.package-version }}"
          
          # Create release notes
          cat > release_notes.md << EOF
          # BusyTag.Lib v$VERSION
          
          ## üì¶ Package Information
          - **Version**: $VERSION
          - **Target Frameworks**: .NET 8.0, .NET 9.0, .NET 9.0-windows, .NET 9.0-maccatalyst
          - **Platform Support**: Windows and macOS (Linux support coming soon)
          - **NuGet Package**: [BusyTag.Lib v$VERSION](https://www.nuget.org/packages/BusyTag.Lib/$VERSION)
          
          ## üöÄ Installation
          
          ### Package Manager Console
          \`\`\`powershell
          Install-Package BusyTag.Lib -Version $VERSION
          \`\`\`
          
          ### .NET CLI
          \`\`\`bash
          dotnet add package BusyTag.Lib --version $VERSION
          \`\`\`
          
          ### PackageReference
          \`\`\`xml
          <PackageReference Include="BusyTag.Lib" Version="$VERSION" />
          \`\`\`
          
          ## üìã What's Changed in v0.5.2
          
          - **Platform Support**: Linux support temporarily disabled pending further testing
          - **Stability**: Improved platform detection for Windows and macOS
          - **Feature Flag**: Added \`EnableExperimentalLinuxSupport\` flag for future Linux testing
          - **Documentation**: Updated to reflect current platform support status
          
          ## ‚ö†Ô∏è Important Notes
          
          - Linux support is temporarily disabled but code remains in place for future enablement
          - To experiment with Linux support (not recommended for production):
            \`\`\`csharp
            manager.EnableExperimentalLinuxSupport = true;
            \`\`\`
          
          ## üîß Technical Details
          - Built with .NET 8.0 and 9.0 SDK
          - Cross-platform compatibility (Windows, macOS)
          - Includes PDB symbols for debugging
          
          ## üìû Support
          - üêõ [Report Issues](https://github.com/busy-tag/busytag-lib/issues)
          - üí¨ [Discussions](https://github.com/busy-tag/busytag-lib/discussions)
          - üìß [Email Support](mailto:support@busy-tag.com)
          EOF
          
          echo "Release notes created"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name || format('v{0}', needs.pack.outputs.package-version) }}
          name: BusyTag.Lib v${{ needs.pack.outputs.package-version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
            ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.snupkg
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest  # Keep ubuntu for publishing (no device access needed)
    needs: [pack, validate, create-release]
    environment: production  # Requires manual approval
    
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-package
          path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish to NuGet
        run: |
          PACKAGE_FILE=$(find ${{ env.PACKAGE_OUTPUT_DIRECTORY }} -name "*.nupkg" | head -1)
          
          echo "Publishing package: $PACKAGE_FILE"
          
          dotnet nuget push "$PACKAGE_FILE" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source ${{ env.NUGET_SOURCE_URL }} \
            --skip-duplicate
          
          echo "‚úÖ Package published successfully to NuGet!"
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

      - name: Verify publication
        run: |
          VERSION="${{ needs.pack.outputs.package-version }}"
          echo "üîç Verifying package publication..."
          sleep 30  # Wait for NuGet indexing
          
          # Try to find the package (may take a few minutes to be available)
          echo "Package should be available at: https://www.nuget.org/packages/BusyTag.Lib/$VERSION"

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [publish-nuget]
    if: always()
    
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            build-artifacts
            nuget-package
            nuget-symbols
          failOnError: false